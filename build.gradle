apply plugin: 'java'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

group               = "co.paralleluniverse"
version             = "0.2-SNAPSHOT"
status              = "integration"
description         = "lightweight threads and actors for the JVM."
ext.url             = "http://puniverse.github.com/quasar"
ext.vendor          = "Parallel Universe Software Co."
ext.licenseName1    = "The GNU Lesser General Public License, version 3"
ext.licenseUrl1     = "http://www.gnu.org/licenses/lgpl-3.0.txt"
ext.licenseName2    = "Eclipse Public License - v 1.0"
ext.licenseUrl2     = "http://www.eclipse.org/legal/epl-v10.html"
ext.scmUrl          = "https://github.com/puniverse/quasar"
ext.scmConnection   = "https://github.com/puniverse/quasar.git"
ext.distDir         = "$buildDir/dist"

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = ''
}

repositories {
    flatDir {
        dirs 'baselib'
    }
    repositories {
        mavenCentral()
    }
}

dependencies {
    compile ":jsr166e"
    compile "com.yammer.metrics:metrics-core:2.0.2" 
    compile "org.ow2.asm:asm:4.1" 
    compile "org.ow2.asm:asm-analysis:4.1"
    compile "org.ow2.asm:asm-util:4.1"
    compile "ant:ant:1.7.0"
    compile "com.google.guava:guava:11.0.1"
    compile "net.sf.trove4j:trove4j:3.0.2"
    testCompile 'junit:junit:4.10'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.mockito:mockito-all:1.9.0'
}


task instrumentClasses(dependsOn: 'compileJava') << {
    //ant.logging.level = LogLevel.INFO
    ant.taskdef(name:'continuations', classname:'co.paralleluniverse.fibers.instrument.InstrumentationTask', classpath: "build/classes/main:" + configurations.compile.asPath)
    ant.continuations(verbose:'true', check:'true', debug:'true') {
        fileset(dir: sourceSets.main.output.classesDir) {
            exclude(name: 'co/paralleluniverse/fibers/*.class')
            exclude(name: 'co/paralleluniverse/fibers/instrument/*.class')
        }
    }
}

task instrumentTestClasses(dependsOn: 'compileTestJava') << {
    //ant.logging.level = LogLevel.INFO
    ant.taskdef(name:'continuations', classname:'co.paralleluniverse.fibers.instrument.InstrumentationTask', classpath: "build/classes/main:" + configurations.compile.asPath)
    ant.continuations(verbose:'true', check:'true', debug:'true') {
        fileset(dir: sourceSets.test.output.classesDir)
    }
}

//testClasses.dependsOn instrumentClasses, instrumentTestClasses

test.dependsOn jar

jar {
    from zipTree('baselib/jsr166e.jar')  // include non-Maven jars
    manifest { 
        attributes(
            "Built-By"                  :   System.getProperty("user.name"),
            "Implementation-Title"      :   name,
            "Implementation-Version"    :   version,
            "Implementation-Vendor"     :   vendor,
            "Premain-Class"             :   "co.paralleluniverse.fibers.instrument.JavaAgent",
            "Can-Retransform-Classes"   :   "true",
            "Class-Path"                :   configurations.runtime.collect { "lib/"+it.getName() }.join(',') 
        )
    }
}

tasks.withType(Test) { 
    useJUnit()
    systemProperty 'co.paralleluniverse.fibers.verifyInstrumentation', 'true'
    jvmArgs "-javaagent:${jar.archivePath}" // =v
    doLast() {
        println "file://" + testReportDir + "/index.html"    
    }    
}

task run(type: JavaExec, dependsOn:[testClasses]) {
    main = mainClass
    systemProperty 'co.paralleluniverse.fibers.verifyInstrumentation', 'true'
    jvmArgs "-javaagent:${jar.archivePath}" // =v
}

tasks.withType(JavaExec) { 
    classpath = sourceSets.test.runtimeClasspath   
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.5-20130302103424+0000'
}

defaultTasks 'build'

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
} 

///////// Publish Artifacts 
apply plugin: 'maven'
apply plugin: 'signing'

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
    //    archives distZip
}

signing {
    sign configurations.archives
}

// remove jsr166e
configure(install.repositories.mavenInstaller) {
    pom.whenConfigured { pom -> pom.dependencies = pom.dependencies.findAll { 
            dep -> !dep.artifactId.startsWith('jsr166e') } 
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(
                 url: "https://oss.sonatype.org/content/repositories/snapshots") {
                 // url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                // User and Password are taken from ~/.gradle/gradle.properties
                if (hasProperty("sonatypeUsername") && hasProperty("sonatypePassword")) {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                } else {
                    authentication(userName: "", password: "")                    
                }
            } 
            pom.whenConfigured { pom -> pom.dependencies = pom.dependencies.findAll { 
                    dep -> !dep.artifactId.startsWith('jsr166e') } 
            }
            pom.project {
                name project.name
                packaging 'jar'
                description project.description
                url project.url
                scm {
                    url project.scmUrl
                    connection project.scmConnection
                    developerConnection project.scmConnection
                } 
                licenses {
                    license {
                        name project.licenseName1
                        url project.licenseUrl1
                        distribution 'repo'
                    }
                    license {
                        name project.licenseName2
                        url project.licenseUrl2
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'pron'
                        name 'Ron Pressler'
                    }
                }
            }
        }
    }
}
